[{"title":"滴水听课笔记7","date":"2022-01-15T04:14:57.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B07/","categories":[["undefined",""]]},{"title":"PHP1","date":"2022-01-15T04:14:50.000Z","url":"/2022/01/15/PHP1/","categories":[["undefined",""]],"content":"( 一 ) （二） （三） （四） · 4）合理运用注释可以方便我们阅读便于理解 （五） 1）变量概念 自已理解可变的量例如衣柜 槑~槑"},{"title":"滴水听课笔记5","date":"2022-01-15T04:14:43.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B05/","categories":[["undefined",""]]},{"title":"滴水听课笔记4","date":"2022-01-15T04:14:35.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B04/","categories":[["undefined",""]]},{"title":"滴水听课笔记3","date":"2022-01-15T04:14:18.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B03/","categories":[["undefined",""]],"content":"1，寄存器他与普通的内存条差不多但它是在CPU内部的可以对CPU数据进行快速储存 寄存器的基本样式如下 寄存器 编号 （二进制） 32位 16位 8位EAX AX AL 0000 0ECX CX CL 0001 1EDX DX DL 0010 2EBX BX BL 0011 3ESP SP AH 0100 4EBP BP CH 0101 5ESI SI DH 0110 6EDI DI BH 0111 72，实际上寄存器是包含关系大致意思 3，基础汇编指令 mov 指令 用法 mov eax,0x32435 即将32453移动到EAX中 基本指令 MOV指令 移动ADD指令 加法SUB指令 减法NOT指令 逻辑运算 非运算AND指令 与运算OR指令 或运算XOP指令 异或运算用法示例 add eax,123（就是在寄存器eax记录数再加一） 4，内存 当我们需要运算一个很大的数时我们就会发现寄存器不够用了，而这就自然而然 引出内存的概念，内存是在CPU外面的所以说它可以很大但速度就与寄存器差很多啦，所 以内存不想寄存器有那麽多EAX ECX 啥的具体分类，内存是通过0x000 0x001 0x002这种 进行编号的由于寄存器和内存功能啥的是一致的（内存要和硬盘区分开）所以说以32为计算 机为例寄存器识别 0x00000000到0xffffffff 所以说内存编号只能到0x00000000 0xffffffff为止 内存一个存储单元最大单位是字节 而寄存器是四个字节所以说在汇编中内存的读取是一次性读取 四个地址 内存编号0x00000000 0xffffffff 所以说内存存储最大位0xffffffff+1也就是4G，所以说32位 计算机对应的识别内存是4G。（事无绝对也可以通过补丁等手段令其改变） 5，在汇编中获取内存是若用0x3223f890f这种方法会与立即数产生矛盾所以用内存时需要先[]来将 地址括住 即写的数是多大 by 八位 word 十六位 dword 32位即正确格式 mov word ptr ds:[0x003243f9],0x4721abcd 槑~槑"},{"title":"滴水听课笔记2","date":"2022-01-15T04:13:32.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E5%90%AC%E8%AF%BE%E7%AC%94%E8%AE%B02/","categories":[["undefined",""]],"content":"1，日常中数字的个数是没有个数的，但在计算机中不是的，在计算机中储存个数是一定 一旦超出便会舍弃。 2，在四位宽度的计算机中，也就是计算机只能储存二进制的四位（0000 1111） 8 79 6a 5b 4c 3d 2e 1f 0 若是有符号位则分为（0000到0111）和（1110到1111）即若是无符号为 0000 1111（0~15） 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 11110 1 2 3 4 5 6 7 -8 -7 -6 -5 -4 -3 -2 -13，在八位宽度的计算机中，也就是计算机只能储存二进制的八位（0 到FF） 80 7f。。。 。。。。。。 。。。ff 0若是有符号位则分为（0到7f）和（80到ff）即若是无符号为 0 ff（0~255） 0 1 … 7f 80 81 … ff0 1 … 128 -128 -127 … -14,在我们实际生活中常用到的为X32位和X64位比较多 同理32位无符号为是（0到ffffffff)有符号为分为（0到7fffffff)和（8000到ffffffff) 5，计算机运算问题，首先需要明白计算机是不会加减乘除的他只会位运算即 或 非 与 异或 或运算（|）即两个均为零时才为零，有一个唯一都为1 |—————————— 与运算（&amp;）两个相同才为一 &amp;—————————— 非运算（~）零变为一，一变为零（非运算只需一个值） ~—————————— 异或运算（^）只有两个不同时才为一 ^ —————————— 6，明白以上位运算以后便可以知晓计算机是如何做加减乘除的啦 第一步转成二进制 00001001 00001010第二部进行异或运算 00001001 ^—————— 进行与运算 判断是否全为零 是进行转进制输出R 否进行移位符左移 &lt;&lt;一位 &amp;————— 再次进行异或运算 00000011 ^—————— 进行与运算 判断是否全为零 是进行转进制输出R 否进行移位符左移 &lt;&lt;一位 &amp;—————— 结束 00010011——&gt;197,会了加法减法不就是手到擒来吗？至于乘除无非就是多加几次的问题，反正计算机不是你， 又没有小情需。 8，在我们正常情况下，我们会遇到一些求第几位是什莫的问题（在二进制中）这个若我们在 用小本本写就太拉跨了，既然我们学了位运算那岂不是可以有更好的方法那，这个是当然有的 很简单我们只需要一个与运算就能解决。 一个7fa的 第7位举例 7fa ——&gt;0011111111010 &amp;—————————— 9，就以上位运算也诞生了最简单加密方式即通过位运算加密 加密 一串数字 5484 5484——&gt;0101 0100 1000 0100密匙 4 （密匙为一个数字 所以加密也为一个一个加密） 4——&gt;0100 输出结果 1120 或 0001 0000 1100 0000当然要解密只需通过密匙在进行一次异或即可 密文 0001 0000 1100 0000 4——&gt;0100密匙 4 0001 0000 1100 0000 结果 0101 0100 1000 0100 👈5484 槑~槑"},{"title":"滴水课程笔记1","date":"2022-01-15T03:31:26.000Z","url":"/2022/01/15/%E6%BB%B4%E6%B0%B4%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B01/","categories":[["undefined",""]],"content":"1，进制问题，我们正常使用的一直为十进制即封十进一，但也有其他的 例如时间计时中的秒到分即六十进一所以说进制是不仅仅只有十进制的还 有其他的。 2，在计算机中常见的不仅有十进制还有十六进制与二进制，而十六进制与二 进制在计算机中其主要作用，由于计算机在内部是由二进制进行运算储存的 但二进制又有一定的局限性进而使用十六进制。 3，二进制即是由 0 1 两个字符构成 二进制（0到15）0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 1111十六进制即 0 1 2 3 4 5 6 7 8 9 a b c d e f十六个字符构成 十六进制（0到15）0 1 2 3 4 5 6 7 8 9 a b c d e f4，由此不难发现二进制较长不易抒写于是用十六进制代替二进制就较易书写 存储。 二进制相比较十六进制0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 11110 1 2 3 4 5 6 7 8 9 a b c d e f所以说计算机在内部储存是常用十六进制来代替二进制。 听课笔记若有错误希望海涵并指出错误，感谢。"},{"title":"Hello World","date":"2022-01-14T04:03:11.029Z","url":"/2022/01/14/PHP2/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]